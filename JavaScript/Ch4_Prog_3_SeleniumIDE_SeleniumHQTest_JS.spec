// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('seleniumhq', function() {
  this.timeout(30000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('firefox').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('seleniumhq', async function() {
    // Test name: seleniumhq
    // Step # | name | target | value | comment
    // 1 | open | / |  |
    await driver.get("https://www.seleniumhq.org/")
    // 2 | setWindowSize | 1050x708 |  |
    await driver.setRect(1050, 708)
    // 3 | click | css=html |  |
    await driver.findElement(By.css("html")).click()
    // 4 | click | linkText=Download |  |
    await driver.findElement(By.linkText("Download")).click()
    // 5 | click | linkText=Download |  |
    await driver.findElement(By.linkText("Download")).click()
    // 6 | click | css=.sectionDownload |  |
    await driver.findElement(By.css(".sectionDownload")).click()
    // 7 | click | linkText=Browser Automation |  |
    await driver.findElement(By.linkText("Browser Automation")).click()
    // 8 | click | css=td:nth-child(2) .icon |  |
    await driver.findElement(By.css("td:nth-child(2) .icon")).click()
    // 9 | click | linkText=Docs |  |
    await driver.findElement(By.linkText("Docs")).click()
    // 10 | click | linkText=Code Export |  |
    await driver.findElement(By.linkText("Code Export")).click()
    // 11 | click | linkText=JavaScript Mocha |  |
    await driver.findElement(By.linkText("JavaScript Mocha")).click()
    // 12 | click | linkText=Plugins |  |
    await driver.findElement(By.linkText("Plugins")).click()
    // 13 | click | linkText=Emitting Code |  |
    await driver.findElement(By.linkText("Emitting Code")).click()
    // 14 | click | linkText=Error Handling |  |
    await driver.findElement(By.linkText("Error Handling")).click()
  })
})
