// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('Google Tests', function() {
  this.timeout(30000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('firefox').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  async function waitForWindow(timeout = 2) {
    await driver.sleep(timeout)
    const handlesThen = vars["windowHandles"]
    const handlesNow = await driver.getAllWindowHandles()
    if (handlesNow.length > handlesThen.length) {
      return handlesNow.find(handle => (!handlesThen.includes(handle)))
    }
    throw new Error("New window did not appear before timeout")
  }
  it('Test_1', async function() {
    // Test name: Test_1
    // Step # | name | target | value | comment
    // 1 | click | name=q |  | 
    await driver.findElement(By.name("q")).click()
    // 2 | type | name=q | testing | 
    await driver.findElement(By.name("q")).sendKeys("testing")
    // 3 | sendKeys | name=q | ${KEY_ENTER} | 
    await driver.findElement(By.name("q")).sendKeys(Key.ENTER)
    // 4 | mouseOver | id=uid_1 |  | 
    {
      const element = await driver.findElement(By.id("uid_1"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    // 5 | mouseOut | id=uid_1 |  | 
    {
      const element = await driver.findElement(By.CSS_SELECTOR, "body")
      await driver.actions({ bridge: true }).moveToElement(element, 0, 0).perform()
    }
    // 6 | mouseOver | css=.NFQFxe:nth-child(2) .izHQgf |  | 
    {
      const element = await driver.findElement(By.css(".NFQFxe:nth-child(2) .izHQgf"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    // 7 | mouseOut | css=.NFQFxe:nth-child(2) .izHQgf |  | 
    {
      const element = await driver.findElement(By.CSS_SELECTOR, "body")
      await driver.actions({ bridge: true }).moveToElement(element, 0, 0).perform()
    }
    // 8 | click | css=.NFQFxe:nth-child(2) .RJn8N |  | 
    await driver.findElement(By.css(".NFQFxe:nth-child(2) .RJn8N")).click()
    // 9 | click | linkText=Wikipedia |  | 
    vars["windowHandles"] = await driver.getAllWindowHandles()
    // 10 | storeWindowHandle | root |  | 
    await driver.findElement(By.linkText("Wikipedia")).click()
    // 11 | selectWindow | handle=${win9463} |  | 
    vars["win9463"] = await waitForWindow(2000)
    // 12 | click | css=.tocsection-45 > a > .toctext |  | 
    vars["root"] = await driver.getWindowHandle()
    // 13 | click | linkText=Test automation |  | 
    await driver.switchTo().window(vars["win9463"])
    // 14 | click | css=.tocsection-5 .toctext |  | 
    await driver.findElement(By.css(".tocsection-45 > a > .toctext")).click()
    // 15 | click | css=.thumbimage |  | 
    await driver.findElement(By.linkText("Test automation")).click()
    // 16 | mouseOver | css=.thumbimage |  | 
    await driver.findElement(By.css(".tocsection-5 .toctext")).click()
    // 17 | runScript | window.scrollTo(0,0) |  | 
    await driver.findElement(By.css(".thumbimage")).click()
    // 18 | mouseOut | css=.thumbimage |  | 
    {
      const element = await driver.findElement(By.css(".thumbimage"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    // 19 | click | css=.mw-mmv-final-image |  | 
    await driver.executeScript("window.scrollTo(0,0)")
    // 20 | click | css=body |  | 
    {
      const element = await driver.findElement(By.CSS_SELECTOR, "body")
      await driver.actions({ bridge: true }).moveToElement(element, 0, 0).perform()
    }
    // 21 | close |  |  | 
    await driver.findElement(By.css(".mw-mmv-final-image")).click()
    // 22 | selectWindow | handle=${root} |  | 
    await driver.findElement(By.css("body")).click()
    // 23 | assertTitle | title | Google | Test Google Title in Google Home Page
    await driver.close()
    // 24 | doubleClickAt | xpath=//html[contains(.,'Preparing to run your test')] |  | 
    await driver.switchTo().window(vars["root"])
    assert(await driver.getTitle() == "title")
    {
      const element = await driver.findElement(By.xpath("//html[contains(.,\'Preparing to run your test\')]"))
      await driver.actions({ bridge: true}).doubleClick(element).perform()
    }
  })
})
